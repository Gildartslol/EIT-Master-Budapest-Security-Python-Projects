import random
import hashlib
import binascii
import sys


class DiffieHellman:
    P = 101
    G = 51

    # if no secret given, then ramdom number from 1 bitwise lengh of g -1 to G -1.
    def __init__(self, secret=0):
        if secret == 0:
            self.secret = random.randrange(1 << (self.G.bit_length() - 1), self.G - 1)
        else:
            self.secret = secret
        self.public = pow(self.G, self.secret, self.P)

    # shared secret: (g^b)^a mod p
    def get_shared_secret(self, remote_pub):
        return pow(remote_pub, self.secret, self.P)

        # Given the public key of B (remote_pub), shows that the shared secret between A and B was generated by A.
        # Returns zero-knowledge proof of shared Diffie-Hellman secret between A & B.

    def prove_shared_secret(self, remote_pub):
        G = self.G
        prover_pub = self.public
        phi = self.P - 1
        secret = self.get_shared_secret(remote_pub)
        randKey = DiffieHellman()  # random secret
        commit1 = randKey.public
        commit2 = randKey.get_shared_secret(remote_pub)
        # shifting and hashing
        concat = str(G) + str(prover_pub) + str(remote_pub) + str(secret) + str(commit1) + str(commit2)
        h = hashlib.md5()
        h.update(concat.encode("utf-8"))
        challenge = int(h.hexdigest(), 16)
        product = (self.secret * challenge) % phi
        response = (randKey.secret - product) % phi
        return secret, challenge, response

    def verify_shared_secret(self, prover_pub, remote_pub, secret, challenge,
                             response):
        P = self.P
        G = self.G
        public = self.public
        commit1 = (pow(G, response, P) * pow(public, challenge, P)) % P
        commit2 = (pow(remote_pub, response, P) * pow(secret, challenge, P)) % P
        # Shifting and hashing
        hasher = hashlib.md5()
        concat = str(G) + str(prover_pub) + str(remote_pub) + str(secret) + str(commit1) + str(commit2)
        hasher.update(concat.encode("utf-8"))
        check = int(hasher.hexdigest(), 16)
        if challenge == check:
            return secret
        else:
            return 0


if __name__ == '__main__':
    x = 16
    y = 15
    a = DiffieHellman(x)
    b = DiffieHellman(y)
    print("G = ", a.G)
    print("p = ", a.P)
    print("x = ", x)
    print("y = ", y)
    print("\n====================")
    print("a (public,secret) = ", a.public, ',', a.secret)
    print("b (public,secret) = ", b.public, ',', b.secret)
    shared = a.get_shared_secret(b.public)
    print("Shared = ", shared)
    print("\nNow Bob will generate the secret, a challenge and a response")
    results = a.prove_shared_secret(b.public)
    print("(secret, challenge, response):", results)
    val = a.verify_shared_secret(a.public, b.public, results[0], results[1], results[2])
    print("\nAlice checking")
    if val == shared:
        print("Bob proves he knows x")
    else:
        print("Bob doesnt knows x")
